import React, { useEffect, useState } from 'react';import Ticket from '../Ticket/Ticket';import Filters from '../Filters/Filters';import styles from './TitcketList.module.css';import { useAppDispatch, useAppSelector } from '../../hooks/redux';import { fetchTickets } from '../../store/reducers/FetchTickets';import Loader from '../Loader/Loader';import { ITicket } from '../models/Ticket';import { fetchSearchId } from '../../store/reducers/FetchSearchId';const TicketList = () => {  const [howMuchTicketsToShow, setHowMuchTicketsToShow] = useState(5);  const {    tickets,    isLoading,    filterBtnOneTransitions,    filterBtnTwoTransitions,    filterBtnThreeTransitions,    filterBtnNoTransitions,    SearchIdKey,    stop,    isAllTicketsLoaded,  } = useAppSelector((state) => state.ticketReducer);  const dispatch = useAppDispatch();  const getTickets = async (key: string, keep: boolean) => {    if (!keep) {      const test: any = await dispatch(fetchTickets({ searchId: key, stop: keep }));      const stop = test.payload.stop;      if (!stop) {        await getTickets(SearchIdKey, stop);      }    }  };  useEffect(() => {    dispatch(fetchSearchId());  }, []);  useEffect(() => {    if (SearchIdKey !== '') {      getTickets(SearchIdKey, stop);    }  }, [SearchIdKey]);  const testTickets: ITicket[] = [];  if (filterBtnNoTransitions) {    const filteredTickets = tickets.filter(      (el) => el.segments[0].stops.length === 0 || el.segments[1].stops.length === 0    );    testTickets.push(...filteredTickets);  }  if (filterBtnOneTransitions) {    const filteredTickets = tickets.filter(      (el) => el.segments[0].stops.length === 1 || el.segments[1].stops.length === 1    );    testTickets.push(...filteredTickets);  }  if (filterBtnTwoTransitions) {    const filteredTickets = tickets.filter(      (el) => el.segments[0].stops.length === 2 || el.segments[1].stops.length === 2    );    testTickets.push(...filteredTickets);  }  if (filterBtnThreeTransitions) {    const filteredTickets = tickets.filter(      (el) => el.segments[0].stops.length === 3 || el.segments[1].stops.length === 3    );    testTickets.push(...filteredTickets);  }  const visibleTickets = testTickets.slice(0, howMuchTicketsToShow);  const elements = visibleTickets.map((el) => {    return (      <Ticket        key={String(el.price) + String(el.segments[0].duration)}        price={el.price}        carrier={el.carrier}        firstOrigin={el.segments[0].origin}        secondOrigin={el.segments[1].origin}        firstDestination={el.segments[0].destination}        secondDestination={el.segments[1].destination}        firstDate={el.segments[0].date}        secondDate={el.segments[1].date}        firstStops={el.segments[0].stops}        secondStops={el.segments[1].stops}        firstDuration={el.segments[0].duration}        secondDuration={el.segments[1].duration}      />    );  });  return (    <div className={styles.ticketList}>      <Filters />      {isLoading ? null : isAllTicketsLoaded ? null : <Loader />}      {isLoading ? <Loader /> : elements.length > 0 ? elements : 'Билеты не найдены'}      <button className={styles.ticketListButton} onClick={() => setHowMuchTicketsToShow((p) => p + 5)}>        Показать еще 5 билетов!      </button>    </div>  );};export default TicketList;